// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/model/log.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/puppetlabs/relay-pls/pkg/model"
	reflect "reflect"
)

// MockKeyManager is a mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockKeyManager) Create(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKeyManagerMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyManager)(nil).Create), ctx)
}

// Decrypt mocks base method
func (m *MockKeyManager) Decrypt(ctx context.Context, key string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, key, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockKeyManagerMockRecorder) Decrypt(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKeyManager)(nil).Decrypt), ctx, key, data)
}

// Encrypt mocks base method
func (m *MockKeyManager) Encrypt(ctx context.Context, key string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", ctx, key, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockKeyManagerMockRecorder) Encrypt(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockKeyManager)(nil).Encrypt), ctx, key, data)
}

// MockLogMetadataManager is a mock of LogMetadataManager interface
type MockLogMetadataManager struct {
	ctrl     *gomock.Controller
	recorder *MockLogMetadataManagerMockRecorder
}

// MockLogMetadataManagerMockRecorder is the mock recorder for MockLogMetadataManager
type MockLogMetadataManagerMockRecorder struct {
	mock *MockLogMetadataManager
}

// NewMockLogMetadataManager creates a new mock instance
func NewMockLogMetadataManager(ctrl *gomock.Controller) *MockLogMetadataManager {
	mock := &MockLogMetadataManager{ctrl: ctrl}
	mock.recorder = &MockLogMetadataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogMetadataManager) EXPECT() *MockLogMetadataManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockLogMetadataManager) Create(ctx context.Context, log *model.Log) (*model.LogMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, log)
	ret0, _ := ret[0].(*model.LogMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockLogMetadataManagerMockRecorder) Create(ctx, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLogMetadataManager)(nil).Create), ctx, log)
}

// Get mocks base method
func (m *MockLogMetadataManager) Get(ctx context.Context, id string) (*model.LogMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.LogMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLogMetadataManagerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLogMetadataManager)(nil).Get), ctx, id)
}
